<?php

namespace app\common\model;

use think\Db;
use think\Model;


class ArticleCategory extends Model
{

    

    

    // 表名
    protected $name = 'article_category';
    
    // 自动写入时间戳字段
    protected $autoWriteTimestamp = 'int';

    // 定义时间戳字段名
    protected $createTime = 'createtime';
    protected $updateTime = 'updatetime';
    protected $deleteTime = false;

    // 追加属性
    protected $append = [
        'is_nav_text',
        'is_index_text',
        'type_text'
    ];
    

    protected static function init()
    {
        self::afterInsert(function ($row) {
            $pk = $row->getPk();
            $row->getQuery()->where($pk, $row[$pk])->update(['weigh' => $row[$pk]]);
        });
    }

    
    public function getIsNavList()
    {
        return ['0' => __('Is_nav 0'), '1' => __('Is_nav 1')];
    }

    public function getIsIndexList()
    {
        return ['0' => __('Is_index 0'), '1' => __('Is_index 1')];
    }

    public function getTypeList()
    {
        return ['0' => __('Type 0'), '1' => __('Type 1'), '2' => __('Type 2')];
    }


    public function getIsNavTextAttr($value, $data)
    {
        $value = $value ? $value : (isset($data['is_nav']) ? $data['is_nav'] : '');
        $list = $this->getIsNavList();
        return isset($list[$value]) ? $list[$value] : '';
    }


    public function getIsIndexTextAttr($value, $data)
    {
        $value = $value ? $value : (isset($data['is_index']) ? $data['is_index'] : '');
        $list = $this->getIsIndexList();
        return isset($list[$value]) ? $list[$value] : '';
    }


    public function getTypeTextAttr($value, $data)
    {
        $value = $value ? $value : (isset($data['type']) ? $data['type'] : '');
        $list = $this->getTypeList();
        return isset($list[$value]) ? $list[$value] : '';
    }

    public static function getChildNavList($parent_id)
    {
        $list = Db::name('article_category')->where('parent_id', '=', $parent_id)->field('id, article_category_name')->select();
        if(!empty($list))
        {
            foreach($list as $k=>$v)
            {
                $childList = self::where('parent_id', '=', $v['id'])->field('id, article_category_name')->select();
                if(!empty($childList))
                {
                    $list[$k]['childList'] = $childList;
                }
            }
        }
        return $list;
    }

    public static function getAllNavList()
    {
        $list = Db::name('article_category')
            ->where('parent_id', '=', 0)
            ->where('is_nav', '=', 1)
            ->field('id, article_category_name, link, article_category_enname, sign')
            ->order('weigh desc, id desc')
            ->select();
        if(!empty($list)) {
            foreach ($list as $k => $v) {
                $list[$k]['oneChildList'] = [];
                $oneChildList = Db::name('article_category')
                    ->where('parent_id', '=', $v['id'])
                    ->where('is_nav', '=', 1)
                    ->field('id, article_category_name, link, article_category_enname, sign')
                    ->select();
                if(!empty($oneChildList))
                {
                    foreach($oneChildList as $k1=>$v1)
                    {
                        $oneChildList[$k1]['twoChildList']=[];
                        $twoChildList = Db::name('article_category')
                            ->where('parent_id', '=', $v1['id'])
                            ->where('is_nav', '=', 1)
                            ->field('id, article_category_name, link, article_category_enname, sign')
                            ->select();
                        if(!empty($twoChildList))
                        {
                            $oneChildList[$k1]['twoChildList']=$twoChildList;
                        }
                    }
                    $list[$k]['oneChildList'] = $oneChildList;
                }
            }
        }
        return $list;
    }



}
